[{"/home/qsmit/hot-off-the-press/client/src/index.tsx":"1","/home/qsmit/hot-off-the-press/client/src/App.tsx":"2","/home/qsmit/hot-off-the-press/client/src/store/configureStore.tsx":"3","/home/qsmit/hot-off-the-press/client/src/store/reducers/index.tsx":"4","/home/qsmit/hot-off-the-press/client/src/store/reducers/error.tsx":"5","/home/qsmit/hot-off-the-press/client/src/store/reducers/session.tsx":"6","/home/qsmit/hot-off-the-press/client/src/components/Navbar.tsx":"7","/home/qsmit/hot-off-the-press/client/src/components/MainRoutes.tsx":"8","/home/qsmit/hot-off-the-press/client/src/components/pages/Landing.tsx":"9","/home/qsmit/hot-off-the-press/client/src/components/pages/Session.tsx":"10","/home/qsmit/hot-off-the-press/client/src/components/AuthForm.tsx":"11","/home/qsmit/hot-off-the-press/client/src/services/api.tsx":"12"},{"size":220,"mtime":1610373159262,"results":"13","hashOfConfig":"14"},{"size":870,"mtime":1610415488272,"results":"15","hashOfConfig":"14"},{"size":407,"mtime":1610329934772,"results":"16","hashOfConfig":"14"},{"size":258,"mtime":1610327626322,"results":"17","hashOfConfig":"14"},{"size":863,"mtime":1610414670422,"results":"18","hashOfConfig":"14"},{"size":2866,"mtime":1610431211880,"results":"19","hashOfConfig":"14"},{"size":1382,"mtime":1610444836620,"results":"20","hashOfConfig":"14"},{"size":1235,"mtime":1610442447380,"results":"21","hashOfConfig":"14"},{"size":130,"mtime":1610375709012,"results":"22","hashOfConfig":"14"},{"size":1162,"mtime":1610442978170,"results":"23","hashOfConfig":"14"},{"size":4075,"mtime":1610434992860,"results":"24","hashOfConfig":"14"},{"size":776,"mtime":1610421484472,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"hyvzum",{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/qsmit/hot-off-the-press/client/src/index.tsx",[],["55","56"],"/home/qsmit/hot-off-the-press/client/src/App.tsx",["57","58"],"import React from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore'\nimport { BrowserRouter } from 'react-router-dom'\nimport { SessionState } from './store/reducers/session'\nimport { ErrorState } from './store/reducers/error'\nimport Navbar from './components/Navbar';\nimport MainRoutes from './components/MainRoutes';\n\nconst store = configureStore()\n\nexport interface StoreState {\n  session: SessionState;\n  errors: ErrorState\n}\n\nconst App: React.FC = () => {\n  const [data, setData] = React.useState(null);\n\n  // const getData = () => {\n  //   fetch('/api')\n  //     .then((result) => result.text())\n  //     .then((res) => setData(res));\n  // };\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Navbar/>\n        <MainRoutes/>\n      </BrowserRouter>\n    </Provider>\n  );\n  \n}\n\nexport default App;\n","/home/qsmit/hot-off-the-press/client/src/store/configureStore.tsx",[],"/home/qsmit/hot-off-the-press/client/src/store/reducers/index.tsx",[],"/home/qsmit/hot-off-the-press/client/src/store/reducers/error.tsx",["59"],"//ACTION TYPES\nconst ADD_ERROR: 'ADD_ERROR' = 'ADD_ERROR'\nconst REMOVE_ERROR: 'REMOVE_ERROR' = 'REMOVE_ERROR'\n\n// TYPES AND INTERFACES\nexport interface ErrorState {\n    message: string | null\n}\n\nexport type Actions = \n    | {type: \"ADD_ERROR\", message: string}\n    | {type: \"REMOVE_ERROR\"}\n\n// ACTION CREATORS\nexport const addError = (error: string) => {\n    return {\n        type: ADD_ERROR, \n        message: error\n    }\n}\n\nexport const removeError = () => {\n    return {\n        type: REMOVE_ERROR\n    }\n}\n\n// THUNKS\n\n// REDUCER - generic error handler\n\nexport default (state: ErrorState = { message: null}, action: Actions) => {\n    switch (action.type) {\n        case ADD_ERROR:\n            return {...state, message: action.message};\n        case REMOVE_ERROR:\n            return {...state, message: null};\n        default:\n            return state;\n    }\n}","/home/qsmit/hot-off-the-press/client/src/store/reducers/session.tsx",["60","61"],"import { AuthType } from '../../components/AuthForm'\nimport { Method } from '../../services/api'\nimport { addError, removeError } from './error'\n// import Cookies from 'js-cookie'\n// TYPES\nimport { Actions as ErrorActions } from './error'\n\n//ACTION TYPES\n// had to make actionType 'ADD_CURRENT_USER' as custom type to satisfy the dispatch arg type later\nconst ADD_CURRENT_USER: 'ADD_CURRENT_USER' = 'ADD_CURRENT_USER'\n/*  \n    don't need 'remove current user' action since logout will just pass an empty user obj\n    which will cause 'isAuthenticated' boolean to be false\n    const REMOVE_CURRENT_USER = 'REMOVE_CURRENT_USER' \n*/\n\n// TYPES AND INTERFACES\nexport interface User {\n    id?: string;\n    username?: string;\n}\n\nexport interface SessionState {\n    isAuthenticated: boolean;\n    user: User | {}\n}\n\ntype Actions = {\n    type: \"ADD_CURRENT_USER\";\n    user: User\n}\n\n// not used\ntype IDispatchCurrentUser = (user: Actions) => void\ntype IDispatchRemoveError = (error: ErrorActions) => void\n\n\n\n// ACTION CREATORS\nconst addCurrentUser = (user: User) => {\n    return {\n        type: ADD_CURRENT_USER,\n        user\n    }\n}\n\n// THUNKS\n\n// note: find better typing for mult dispatches\n// login or signup\nexport const authenticateUser = (type: AuthType, userData: {}) => {\n    return async (dispatch: any) => {\n        try {\n            dispatch(removeError())\n            const res = await fetch(`/api/session/${type}`,{\n                method: Method.POST,\n                headers: {\n                    'Content-Type': 'application/json'\n                }, \n                body: JSON.stringify(userData)\n            })\n\n            const data = await res.json()\n\n            if(!res.ok){\n                throw data\n            }\n\n            //grab out token to add to local storage\n            const { token, id, username } = data\n\n            // set token to localStorage\n            localStorage.setItem('token', token)\n\n            // build user obj with just id and username from returned user from db\n            dispatch(addCurrentUser({ id, username }))\n            \n\n        } catch(e){\n            console.log(e)\n            dispatch(addError(e.message))\n        }\n    }\n}\n\nexport const logout = () => {\n    return (dispatch: IDispatchCurrentUser) => {\n        localStorage.removeItem('token')\n        // Cookies.remove('token')\n        // empty obj to clear current user from redux\n        dispatch(addCurrentUser({}))\n    }\n}\n\n// REDUCER\n\nconst DEFAULT_STATE = {\n    isAuthenticated: false,\n    user: {}\n}\n\nexport default (state: SessionState = DEFAULT_STATE, action: Actions) => {\n    switch (action.type) {\n        case ADD_CURRENT_USER:\n            return {\n                ...state,\n                isAuthenticated: !!Object.keys(action.user).length,\n                user: action.user\n            }\n        default:\n            return state;\n    }\n}","/home/qsmit/hot-off-the-press/client/src/components/Navbar.tsx",[],"/home/qsmit/hot-off-the-press/client/src/components/MainRoutes.tsx",["62","63"],"import React from 'react';\nimport { Switch, Route, withRouter, Redirect, RouteComponentProps } from 'react-router-dom'\nimport Landing from './pages/Landing';\nimport Session from './pages/Session'\n\nconst MainRoutes: React.FC = (props) => {\n    return (\n        <div>\n            <Switch>\n                <Route exact path='/' render={props => <Landing />}/>\n                <Route\n                    exact\n                    path='/signup'\n                    render={props  => {\n                        return (\n                            <Session authType='signup' buttonText='signup' heading='Sign Up' {...props} />\n                        )\n                    }}/>\n                <Route\n                    exact\n                    path='/login'\n                    render={props => {\n                        return (\n                            <Session authType='login' buttonText='login' heading='welcome back' {...props} />\n                        )\n                    }}/>\n                <Route exact path='/news/:category'/>\n                <Route exact path='/news/search'/>\n                <Route exact path='/user/:id/bookmarks'/>\n            </Switch>\n        </div>\n    )\n}\n\nexport default withRouter(MainRoutes);","/home/qsmit/hot-off-the-press/client/src/components/pages/Landing.tsx",[],"/home/qsmit/hot-off-the-press/client/src/components/pages/Session.tsx",[],"/home/qsmit/hot-off-the-press/client/src/components/AuthForm.tsx",[],"/home/qsmit/hot-off-the-press/client/src/services/api.tsx",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":18,"column":10,"nodeType":"70","messageId":"71","endLine":18,"endColumn":14},{"ruleId":"68","severity":1,"message":"72","line":18,"column":16,"nodeType":"70","messageId":"71","endLine":18,"endColumn":23},{"ruleId":"73","severity":1,"message":"74","line":32,"column":1,"nodeType":"75","endLine":41,"endColumn":2},{"ruleId":"68","severity":1,"message":"76","line":35,"column":6,"nodeType":"70","messageId":"71","endLine":35,"endColumn":26},{"ruleId":"73","severity":1,"message":"74","line":102,"column":1,"nodeType":"75","endLine":113,"endColumn":2},{"ruleId":"68","severity":1,"message":"77","line":2,"column":37,"nodeType":"70","messageId":"71","endLine":2,"endColumn":45},{"ruleId":"68","severity":1,"message":"78","line":2,"column":47,"nodeType":"70","messageId":"71","endLine":2,"endColumn":66},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'setData' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'IDispatchRemoveError' is defined but never used.","'Redirect' is defined but never used.","'RouteComponentProps' is defined but never used.","no-global-assign","no-unsafe-negation"]